datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  USER
  AUTHOR
  MODERATOR
  ADMIN
}

enum DesignStatus {
  PUBLISHED
  PENDING
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?    @unique
  phoneNumber        String?    @unique
  googleId           String?
  password           String?
  emailVerified      DateTime?
  image              String?
  verificationCode   String?
  createdAt          DateTime?  @default(now())
  bio                String?
  imageId            String?
  status             String?   @default("USER")
  accounts         Account[]
  sessions         Session[]
  design           Design[]
  likes            Like[]
  comments         Comment[]
  applications     Application[]

  @@index([email, phoneNumber], name: "unique_email_phone_number")
}


model Design {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  category      String
  image         String
  imageId       String?
  tags          String[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        DesignStatus @default(PENDING)
  authorId      String       @db.ObjectId
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  viewCount     Int          @default(1)
  downloadCount Int          @default(1)

  @@index([category])
}

model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  designId  String   @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  design Design @relation(fields: [designId], references: [id], onDelete: Cascade)

  @@unique([userId, designId]) // Prevent duplicate likes
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  designId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  design Design @relation(fields: [designId], references: [id], onDelete: Cascade)
}

model Application {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  studentName      String
  session          Int
  fatherName       String
  motherName       String
  birthDay         DateTime
  bloodGroup       String
  mobileNumber     String
  guardianNumber   String
  gender           String
  religion         String
  fullAddress      String
  district         String
  education        String
  board            String
  rollNumber       String
  regNumber        String
  passingYear      String
  gpa              String
  nid              String
  nationality      String
  course           String
  duration         String
  status           String
  image            String
  imageId          String?
  email            String
  pc               String
  transactionId    String?
  fatherOccupation String?
  maritalStatus    String?
  roll             Int?
  certificate      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String   @unique @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])
  payments               Transaction[]
  editable         Boolean? @default(false)
}


model Transaction {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  createdAt   DateTime @default(now())
  PaymentMonth DateTime
  PaymentReceiveDate DateTime
  amount      Float
  application Application @relation(fields: [applicationId], references: [id])
  applicationId String @db.ObjectId
}

model BloodDonation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  birthDate          String
  bloodGroup         String
  address            String
  allergies          String
  donatedBefore      String
  diseases           String
  district           String
  occupation         String
  number             String
  number2            String?
  image              String?
  imageId            String?
  createdAt          DateTime @default(now())
}

model duration {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  button          String
}

model Notice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  pdfUrl      String
  pdfPublicId String
  createdAt   DateTime @default(now())
}
