datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  USER
  AUTHOR
  MODERATOR
  ADMIN
}

enum DesignStatus {
  PUBLISHED
  PENDING
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String      @unique
  password         String?
  emailVerified    DateTime?
  googleId         String?
  bio              String?
  image            String?
  imageId          String?
  verificationCode String?
  createdAt        DateTime    @default(now())
  status           UserStatus  @default(USER)
  accounts         Account[]
  sessions         Session[]
  design           Design[]
}



model Design {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  category    String
  subcategory String
  image       String
  imageId     String?
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      DesignStatus @default(PENDING)
  authorId    String        @db.ObjectId
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([subcategory])
}


model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}